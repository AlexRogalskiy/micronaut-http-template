plugins {
    id 'java'
    id 'jacoco'
    id 'application'

    id 'org.sonarqube' version '3.0'
    id 'com.diffplug.gradle.spotless' version '4.4.0'
    id 'com.github.johnrengelman.shadow' version '5.1.0'
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

group = groupId
version = artifactVersion

sourceCompatibility = 11
targetCompatibility = 11

spotless {
    java {
        encoding 'UTF-8'
        removeUnusedImports()
        eclipse().configFile "${projectDir}/config/codestyle.xml"
    }
}

configurations {
    all {
        resolutionStrategy {
            cacheChangingModulesFor(1000, 'seconds') // check for updates every build
        }
    }
    micronautBom
    compileOnly.extendsFrom(micronautBom)
    implementation.extendsFrom(micronautBom)
    annotationProcessor.extendsFrom(micronautBom)
    testAnnotationProcessor.extendsFrom(micronautBom)
}

dependencies {
    micronautBom enforcedPlatform('io.micronaut:micronaut-bom:2.0.2')

    annotationProcessor 'io.micronaut.configuration:micronaut-openapi'
    annotationProcessor 'io.micronaut:micronaut-inject-java'

    compileOnly 'io.swagger.core.v3:swagger-annotations'

    compile 'io.micronaut:micronaut-runtime'
    compile 'io.micronaut:micronaut-http-client'
    compile 'io.micronaut:micronaut-http-server-netty'

    testAnnotationProcessor 'io.micronaut:micronaut-inject-java'

    testCompile 'io.micronaut.test:micronaut-test-core'
    testCompile 'io.micronaut.test:micronaut-test-junit5'

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'org.junit.jupiter:junit-jupiter-params'
}

//noinspection GroovyAssignabilityCheck
run {
    environment([
            "SECURITY_ENABLED": "false",
    ])
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }

    environment([
            "SECURITY_ENABLED": "false",
            "USE_INTEGRATION_TESTS"   : "$useIntegrationTests",
    ])
}

mainClassName = "micronaut.template.Application"
jar.enabled = false
shadowJar {
    mergeServiceFiles()
    manifest {
        attributes 'Main-Class': mainClassName
        attributes 'App-Version': artifactVersion
        attributes 'Implementation-Version': buildNumber
    }
}

artifacts {
    archives shadowJar
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.incremental = true
    options.fork = true
}

javadoc {
    options.encoding = "UTF-8"
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

check.dependsOn jacocoTestReport
jacocoTestReport {
    reports {
        xml.enabled true
        html.destination file("${buildDir}/jacocoHtml")
    }
}
