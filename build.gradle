plugins {
    id "java"
    id "jacoco"

    id "io.micronaut.application" version "2.0.3"
    id "org.sonarqube" version "3.3"
    id "com.diffplug.spotless" version "5.14.3"
    id "com.github.johnrengelman.shadow" version "7.0.0"
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

group = groupId
version = artifactVersion

sourceCompatibility = 11
targetCompatibility = 11

spotless {
    java {
        encoding("UTF-8")
        importOrder()
        removeUnusedImports()
        eclipse().configFile("${projectDir}/config/codestyle.xml")
    }
}

configurations {
    all {
        resolutionStrategy {
            cacheChangingModulesFor(1000, "seconds") // refresh cache for snapshots
        }
    }
}

micronaut {
    version("3.0.0")
    processing {
        incremental(true)
        module(project.name)
        group(project.group)
        annotations("io.library.micronaut.template.*")
    }
}

dependencies {
    annotationProcessor "io.micronaut.configuration:micronaut-openapi"
    annotationProcessor "io.micronaut:micronaut-inject-java"

    compileOnly "io.swagger.core.v3:swagger-annotations"

    implementation "org.jetbrains:annotations:20.1.0"
    implementation "ch.qos.logback:logback-classic:1.2.3"
    implementation "io.projectreactor:reactor-core"

    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "io.micronaut:micronaut-management"
    implementation "io.micronaut.micrometer:micronaut-micrometer-core"
    implementation "io.micronaut.micrometer:micronaut-micrometer-registry-prometheus"

    testAnnotationProcessor "io.micronaut:micronaut-inject-java"

    testImplementation "io.micronaut.test:micronaut-test-core"
    testImplementation "io.micronaut.test:micronaut-test-junit5"

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "org.junit.jupiter:junit-jupiter-params"
}

//noinspection GroovyAssignabilityCheck
run {
    environment([
            "SECURITY_ENABLED": "false",
    ])
}

test {
    failFast(true)
    useJUnitPlatform()
    testLogging {
        showStandardStreams(false)
        events("passed", "skipped", "failed")
        exceptionFormat("full")
    }

    environment([
            "SECURITY_ENABLED": "false",
    ])

    jacoco {
        excludes += ["**/Application*"]
    }

    reports {
        html.enabled(false)
        junitXml.enabled(false)
    }
}

mainClassName = "io.app.micronaut.template.Application"
jar.enabled(true)
shadowJar {
    mergeServiceFiles()
    manifest {
        attributes "Main-Class": mainClassName
        attributes "Implementation-Version": artifactVersion
        attributes "Build-Version": buildNumber
    }
}

artifacts {
    archives shadowJar
}

tasks.withType(JavaCompile) {
    options.encoding("UTF-8")
    options.incremental(true)
    options.fork = true
}

check.dependsOn jacocoTestReport
jacocoTestReport {
    reports {
        xml.enabled true
        html.destination file("${buildDir}/jacocoHtml")
    }
}

javadoc {
    options.encoding = "UTF-8"
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption("html5", true)
    }
}
